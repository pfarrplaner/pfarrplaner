<?php
/*
 * Pfarrplaner
 *
 * @package Pfarrplaner
 * @author Christoph Fischer <chris@toph.de>
 * @copyright (c) 2020 Christoph Fischer, https://christoph-fischer.org
 * @license https://www.gnu.org/licenses/gpl-3.0.txt GPL 3.0 or later
 * @link https://github.com/pfarrplaner/pfarrplaner
 * @version git: $Id$
 *
 * Sponsored by: Evangelischer Kirchenbezirk Balingen, https://www.kirchenbezirk-balingen.de
 *
 * Pfarrplaner is based on the Laravel framework (https://laravel.com).
 * This file may contain code created by Laravel's scaffolding functions.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace App\Seating;


use App\Booking;
use App\SeatingRow;
use App\Service;

class MaximumBasedSeatFinder extends AbstractSeatFinder
{
    public const UNLIMITED = 999999;
    public $viewName = 'maxBased';
    public $hasSeats = false;

    public function __construct(Service $service, $preloadExistingBookings = true)
    {
        parent::__construct($service, $preloadExistingBookings);
    }

    public function find($number, $fixedSeat = '', $overrideSeats = '', $overrideSplit = '', $bookings = null)
    {
        return ($this->remainingCapacity() - $number >= 0);
    }

    public function checkIfBookingCanBeChanged(Booking $booking, array $data): bool
    {
        return ($this->remainingCapacity() + $booking->number - $data['number']) >= 0;
    }

    public function finalList()
    {
        $final = [];
        $number = 0;
        /** @var Booking $booking */
        foreach ($this->service->bookings as $booking) {
            $number += $booking->number;
            $sortKey = $booking->name . ($booking->first_name ? ', ' . $booking->first_name : '');
            $final[$sortKey] = ['booking' => $booking, 'row' => new SeatingRow(['title' => ''])];
        }
        ksort($final);
        return ['list' => $final, 'empty' => [], 'number' => $number];
    }


    public function maximumCapacity()
    {
        return $this->service->registration_max ?? self::UNLIMITED;
    }

    public function remainingCapacity($bookings = null)
    {
        if (null == $this->service->registration_max) return self::UNLIMITED;
        $seated = 0;
        /** @var Booking $booking */
        foreach ($this->service->bookings as $booking) {
            $seated += $booking->number;
        }

        return $this->maximumCapacity() - $seated;
    }

    public function freeSeatsText()
    {
        if ($this->service->registration_max === null) return 'unbegrenzt';
        return parent::freeSeatsText(); // TODO: Change the autogenerated stub
    }

    /**
     * Get a seating table arranged by booking codes
     * @return array
     */
    public function getSeatingTable(): array {
        $list = [];
        foreach ($this->service->bookings as $booking) {
            $list[$booking->code] = 'keine festen Plätze';
        }
        return $list;
    }

    public function remainingCapacityText($format = ''): string {
        if ($this->service->registration_max === null) return 'unbegrenzte Plätze';
        return parent::remainingCapacityText($format); // TODO: Change the autogenerated stub
    }


}
