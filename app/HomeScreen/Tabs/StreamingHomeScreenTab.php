<?php
/*
 * Pfarrplaner
 *
 * @package Pfarrplaner
 * @author Christoph Fischer <chris@toph.de>
 * @copyright (c) 2020 Christoph Fischer, https://christoph-fischer.org
 * @license https://www.gnu.org/licenses/gpl-3.0.txt GPL 3.0 or later
 * @link https://github.com/pfarrplaner/pfarrplaner
 * @version git: $Id$
 *
 * Sponsored by: Evangelischer Kirchenbezirk Balingen, https://www.kirchenbezirk-balingen.de
 *
 * Pfarrplaner is based on the Laravel framework (https://laravel.com).
 * This file may contain code created by Laravel's scaffolding functions.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace App\HomeScreen\Tabs;


use App\Service;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;

class StreamingHomeScreenTab extends AbstractHomeScreenTab
{
    protected $title = 'Streaming';
    protected $description = 'Zeigt Gottesdienste mit Streamingfunktionen';
    protected $query = null;

    public function __construct($config = [])
    {
        // preset default config
        $this->setDefaultConfig($config, ['locations' => []]);
        parent::__construct($config);
        $this->query = $this->buildQuery();
    }

    public function getCount()
    {
        return $this->buildQuery(false)->count();
    }

    public function getContent($data = [])
    {
        $data['services'] = $this->query->get();
        return parent::getContent($data);
    }

    public function toArray($data = [])
    {
        $data['services'] = $this->query->get();
        $data['count'] = count($data['services']);
        return parent::toArray($data); // TODO: Change the autogenerated stub
    }


    /**
     * Build the query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function buildQuery($includeNew = true) {
        $start = Carbon::now()->setTime(0, 0, 0);
        $end = Carbon::now()->addMonth(2);

        $query = Service::with(['baptisms', 'weddings', 'funerals', 'location'])
            ->between($start, $end)
            ->whereIn('city_id', Auth::user()->cities->pluck('id'))
            ->where(function($query) use ($includeNew) {
                $query->where('youtube_url', '!=', '');
                if ($includeNew) $query->orWhereIn('location_id', $this->config['locations']);
            })
            ->ordered();
        return $query;
    }

    public function view($viewName, $data = [])
    {

        if ($viewName == 'config') {
            $locations = new Collection();
            foreach (Auth::user()->cities as $city) {
                foreach ($city->locations as $location) $locations->push($location);
            }
            $data['locations'] = $locations;
        }
        return parent::view($viewName, $data); // TODO: Change the autogenerated stub
    }


}
